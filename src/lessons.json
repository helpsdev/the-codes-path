[{
  "id": 1,
  "name":"What the object?",
  "explanation": {
      "description" : "Objects in Javascript are simply described as a collection of key/value pairs to store any information. This means that we can think of objects as a bag where we can put items to store them for later use but all those items should be labeled so when you want to find an item if that item is in your bag you can look at the labels to retrieve the actual item.[BR] So how do we create these objects in Javascript? Actually you can create them in different ways. Let's dive into these different ways. First of all we have the object initializers, this is the most simply way to create an object since all you have to do is declare each one of the properties you want to belong to the object by enclosing them (remember as key/value pairs) in curly braces ({}). The way you can separate a key from its value is using a colon between them. Let's see an example.[BR] [OBJECT_INITIALIZER_EXAMPLE_ONE_KEY_VALUE][BR] Pretty simple right? Now, what about having more than one property? In that scenario you can add a comma (,) at the end of the value and keep adding as many key/value paris as you need. Here another object with more than one key/value pairs.[BR] [OBJECT_INITIALIZER_EXAMPLE_MULTIPLE_KEY_VALUE]",
      "examples":{
        "OBJECT_INITIALIZER_EXAMPLE_ONE_KEY_VALUE":"var myObject = {\n   key1 : value1\n }",
        "OBJECT_INITIALIZER_EXAMPLE_MULTIPLE_KEY_VALUE": "var myCar = {\n   wheels: 4,\n   doors: 4,\n   headlights: 2\n }"
      }
  },
  "challenge":"Now it's your turn. Let's create an object using your new knowledge. We are going to prepare a warrior for it's battle.[BR] 1.Create an object and give it a cool name[BR] 2.Add a property 'weapon' and assign it a value of 'sword'.[BR] 3.Add a property 'life' and assign it a value of 100[BR]",
  "tests": [
    {
        "id":1,
        "description":"The object should contain a property named 'weapon' with a value of 'sword'",
        "code":"return function(objToTest){ return objToTest.hasOwnProperty('weapon') && objToTest.weapon === 'sword'; }"
    },
    {
        "id":2,
        "description":"The object should contain a property 'life' and assign it a value of 100",
        "code":"return function(objToTest){ return objToTest.hasOwnProperty('life') && objToTest.life === 100; }"
    }
  ]
}, {
  "id": 2,
  "name":"The function behavior!",
  "explanation": "Functions are an important part of the Javascript world",
  "startCode":"",
  "tests": [
    {
        "id":1,
        "description":"",
        "code":"code"
    },
    {
        "id":1,
        "description":"",
        "code":"code"
    },
    {
        "id":1,
        "description":"",
        "code":"code"
    },
    {
        "id":1,
        "description":"",
        "code":"code"
    },
    {
        "id":1,
        "description":"",
        "code":"code"
    }
  ]
}]